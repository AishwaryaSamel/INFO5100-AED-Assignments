/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.Search;

import Business.Airliner.Airliner;
import Business.Airliner.AirlinerDirectory;
import Business.Fleet.Fleet;
import Business.Fleet.FleetDirectory;
import Business.Flights.Flights;
import Business.Helper;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Rishab
 */
public class AvailableFlightsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form AvailableFlightsJPanel
     */
    JPanel rightPanel;
    private String seatType;
    private FleetDirectory fleetDir;
    private String[] selections;
    private Helper helper;
    private AirlinerDirectory airlinerDirectory;
            
    public AvailableFlightsJPanel(JPanel rightPanel, String seatType, String[] selections, AirlinerDirectory airlinerDirectory) {
        this.seatType = seatType;
        this.airlinerDirectory = airlinerDirectory;
        this.selections = selections;
        this.rightPanel = rightPanel;
        this.helper = helper;
        
        //this.fleetDir = fleetDir;
        initComponents();
        populate();
    }
    
        public void populate(){
            
        String departure = selections[0];    
        String arrival = selections[1];
        String timeOfDay = selections[2];
        String date = selections[3];
        
        int rowCount = flightTable.getRowCount();
        DefaultTableModel model = (DefaultTableModel)flightTable.getModel();
        for(int i=rowCount-1;i>=0;i--) {
        model.removeRow(i);
        }
            
        DefaultTableModel dtm = (DefaultTableModel)flightTable.getModel();
        dtm.setRowCount(0);
        // TEST
        int min =999999;
        int index;
        for(Airliner a : airlinerDirectory.getAirlinerDirectory()){
            for(Flights f : a.getFlightsDirectory().getFlightsDirectory())
            {
                if(f.getPrice() < min){
                    min = f.getPrice();
                }
            }
        }
        
        
        
        
        
        ///
        
        
        
        
        
        for(Airliner a : airlinerDirectory.getAirlinerDirectory()){
            for(Flights f : a.getFlightsDirectory().getFlightsDirectory())
            {
            Object[] row = new Object[dtm.getColumnCount()];
            
            if(String.valueOf(f.getPreferedTimeOfDay()).equalsIgnoreCase(timeOfDay)  && String.valueOf(f.getArrivalLocation()).equalsIgnoreCase(arrival) && String.valueOf(f.getDepartureLocation()).equalsIgnoreCase(departure) && String.valueOf(f.getDate()).equalsIgnoreCase(date) && f.getPrice() == min)
                {  
                row[0]=a;
                row[1]=f;
                row[2]=f.getPreferedTimeOfDay();
                row[3]=f.getDepartureLocation();
                row[4]=f.getArrivalLocation();
                row[5]=f.getDate();
                row[6]=f.getAirplane();
                row[7]=String.valueOf(f.getSeatDirectory().getSeatCount());
                row[8]=f.getPrice();
                dtm.addRow(row);
                
                timeOfDay = f.getPreferedTimeOfDay();
                arrival = f.getArrivalLocation();
                departure = f.getDepartureLocation();
                date = f.getDate();
                }
            }
        }
        if(flightTable.getRowCount() == 0)
        {
            JOptionPane.showMessageDialog(this, "No Flights Found.");
        }
    }    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        backBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        flightTable = new javax.swing.JTable();
        selectSeatBtn = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Flight Availability");

        backBtn.setText("< Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        flightTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Airliner", "Flight Number", "Time of Day", "Departure", "Arrival", "Date", "Airplane", "Seats", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(flightTable);
        if (flightTable.getColumnModel().getColumnCount() > 0) {
            flightTable.getColumnModel().getColumn(0).setResizable(false);
            flightTable.getColumnModel().getColumn(2).setResizable(false);
            flightTable.getColumnModel().getColumn(3).setResizable(false);
            flightTable.getColumnModel().getColumn(4).setResizable(false);
            flightTable.getColumnModel().getColumn(5).setResizable(false);
            flightTable.getColumnModel().getColumn(6).setResizable(false);
            flightTable.getColumnModel().getColumn(8).setResizable(false);
        }

        selectSeatBtn.setText("Select Seat");
        selectSeatBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectSeatBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1180, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(selectSeatBtn)
                            .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(4, 4, 4)
                .addComponent(backBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(selectSeatBtn)
                .addContainerGap(324, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
        rightPanel.remove(this);
        CardLayout cardLayout = (CardLayout)rightPanel.getLayout();
        cardLayout.previous(rightPanel);
    }//GEN-LAST:event_backBtnActionPerformed

    private void selectSeatBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectSeatBtnActionPerformed
        // TODO add your handling code here:
        int SelectedRow = flightTable.getSelectedRow();
        if(SelectedRow >= 0)
        {
        Airliner airliner = (Airliner) flightTable.getValueAt(SelectedRow, 0);
        Flights flight = (Flights) flightTable.getValueAt(SelectedRow, 1);
        CardLayout cardlayout = (CardLayout)rightPanel.getLayout();
        ConfirmBookingJPanel cbPanel = new ConfirmBookingJPanel(rightPanel, seatType, flight, airliner, airlinerDirectory);
        rightPanel.add("ConfirmBookingJPanel",cbPanel);
        cardlayout.next(rightPanel);
        }
        else
        {
            JOptionPane.showMessageDialog(null,"Please select a flight","Alert",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_selectSeatBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    public javax.swing.JTable flightTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton selectSeatBtn;
    // End of variables declaration//GEN-END:variables
}
